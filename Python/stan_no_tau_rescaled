data{
    int<lower=1> N;
    real x[N];

    real tau0;
    
    real<lower=0.0> mu_shape;
    real<lower=0.0> mu_scale;
    real<lower=0.0> sigma_shape;
    real<lower=0.0> sigma_scale;
    
    real<lower=0.0> error_sigma;
    real<lower=0.0> x_max;
}

parameters{
    real<lower = 0.0> mu;
    real<lower = 0.0> sigma;
    real<lower = 0.0, upper = 1/x_max> r[N];
}

transformed parameters{
    real<lower = 0.0> _mu;
    real<lower = 0.0> _sigma;
    real<lower = 0.0> _r[N];

    _mu = mu / mu_scale;
    _sigma = sigma / sigma_scale;
    _r = r / mu_scale;
}

model{
    _mu ~ gamma(mu_shape, 1);
    _sigma ~ gamma(mu_shape, 1);
    for (i in 1:N){
        _r[i] ~ normal(_mu, _sigma) T[0,1/x_max];
        x[i] ~ normal(tau0/r[i], error_sigma) T[0,x_max];
    }
}